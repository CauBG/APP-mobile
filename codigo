import React, { useEffect, useState } from 'react';
import { View, Text, Image, StyleSheet, TextInput, TouchableOpacity } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createNativeStackNavigator } from '@react-navigation/native-stack';
import { createDrawerNavigator, DrawerContentScrollView, DrawerItem } from '@react-navigation/drawer';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Ionicons } from '@expo/vector-icons';
import * as ImagePicker from 'expo-image-picker';
import * as FileSystem from 'expo-file-system';


const Stack = createNativeStackNavigator();
const Drawer = createDrawerNavigator();

// personalizacao dos drawers
function CustomDrawerContent(props) {
  const { state, navigation } = props;
  const [profileImage, setProfileImage] = useState(null);
  const [usuario, setUsuario] = useState('');

  useEffect(() => {
    const carregarDados = async () => {
      const savedImage = await AsyncStorage.getItem('profileImage');
      const savedUser = await AsyncStorage.getItem('usuario');
      if (savedImage) setProfileImage(savedImage);
      if (savedUser) setUsuario(savedUser);
    };
    const unsubscribe = navigation.addListener('focus', carregarDados);
    carregarDados();
    return unsubscribe;
  }, [navigation]);

  const itensDrawer = [
    { name: 'Home', label: 'Home', icon: 'home-outline' },
    { name: 'SecondScreen', label: 'Consultas', icon: 'search-outline' },
    { name: 'ThirdScreen', label: 'Mensagens', icon: 'mail-outline' },
  ];

  return (
    <DrawerContentScrollView 
      {...props} 
      contentContainerStyle={{ flex: 1, backgroundColor: '#EDEDED' }}
    >
      {/* Top bar "Menu" */}
      <View style={styles.drawerTopBar}>
        <Text style={styles.drawerTopBarText}>Menu</Text>
      </View>

      {/* Avatar + Nome do usuário */}
      <View style={styles.profileSection}>
        <View style={styles.profileRow}>
          {profileImage ? (
            <Image source={{ uri: profileImage }} style={styles.drawerAvatar} />
          ) : (
            <Ionicons name="person-circle" size={64} color="#333" />
          )}
          <Text style={styles.drawerUserName}>
            {usuario || 'Usuário'}
          </Text>
        </View>
      </View>

      {/* Itens do Drawer */}
      {itensDrawer.map((item, index) => {
        const isActive = state.index === index;
        return (
          <DrawerItem
            key={item.name}
            label={item.label}
            labelStyle={{ color: isActive ? '#1E90FF' : '#333', fontWeight: isActive ? 'bold' : 'normal' }}
            onPress={() => navigation.navigate(item.name)}
            style={{ backgroundColor: isActive ? '#D6EBFF' : 'transparent', borderRadius: 10, marginHorizontal: 5 }}
            icon={() => <Ionicons name={item.icon} size={22} color={isActive ? '#1E90FF' : '#333'} />}
          />
        );
      })}

      <DrawerItem
        label="Sair"
        labelStyle={{ color: '#333' }}
        onPress={async () => {
          await AsyncStorage.removeItem('logado');
          navigation.replace('Login');
        }}
        icon={() => <Ionicons name="log-out-outline" size={22} color="#333" />}
      />
    </DrawerContentScrollView>
  );
}

// telas
function HomeScreen({ navigation }) {
  const [profileImage, setProfileImage] = useState(null);

  useEffect(() => {
  const loadImage = async () => {
    const savedImage = await AsyncStorage.getItem('profileImage');
    if (savedImage) setProfileImage(savedImage);
  };
  loadImage();
}, []);


  const escolherImagem = async () => {
  const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
  if (!permissionResult.granted) {
    alert('Permissão para acessar a galeria é necessária!');
    return;
  }

  const result = await ImagePicker.launchImageLibraryAsync({
    mediaTypes: ImagePicker.MediaTypeOptions.Images,
    allowsEditing: true,
    aspect: [1, 1],
    quality: 1,
  });

  if (!result.canceled) {
    const selectedImage = result.assets[0].uri;
    try {
      // cria uma cópia persistente da imagem
      const newPath = `${FileSystem.documentDirectory}profile.jpg`;
      await FileSystem.copyAsync({ from: selectedImage, to: newPath });

      await AsyncStorage.setItem('profileImage', newPath);
      setProfileImage(newPath);
    } catch (error) {
      console.log('Erro ao salvar imagem:', error);
    }
  }
};

  return (
    <View style={styles.homeContainer}>
      <View style={styles.topBar}>
        <TouchableOpacity 
          onPress={() => navigation.openDrawer()} 
          style={styles.menuButton}
        >
          <Ionicons name="menu" size={28} color="#fff" />
        </TouchableOpacity>

        <Text style={styles.topBarTitle}>Home</Text>

       <TouchableOpacity 
  onPress={escolherImagem} 
  style={{
    width: 45,
    height: 45,
    borderRadius: 25,
    backgroundColor: '#f0f0f0',
    justifyContent: 'center',
    alignItems: 'center',
    overflow: 'hidden',
    marginLeft: 'auto', // mantém ele no canto direito
  }}
>
  {profileImage && profileImage !== '' ? (
    <Image
      source={{ uri: profileImage }}
      style={{
        width: '100%',
        height: '100%',
        borderRadius: 25,
      }}
      onError={() => console.log('Falha ao carregar imagem')}
    />
  ) : (
    <Ionicons name="camera-outline" size={26} color="#000" />
  )}
</TouchableOpacity>
      </View>

      <View style={styles.content}>
        <Text style={styles.contentText}>Em breve</Text>
      </View>
    </View>
  );
}

function SecondScreen({ navigation }) {
  return (
    <View style={styles.homeContainer}>
      <View style={styles.topBar}>
        <TouchableOpacity 
          onPress={() => navigation.openDrawer()} 
          style={styles.menuButton}
        >
          <Ionicons name="menu" size={28} color="#fff" />
        </TouchableOpacity>
        <Text style={styles.topBarTitle}>Consultas</Text>
      </View>
      <View style={styles.content}>
        <Text style={styles.contentText}>Em breve</Text>
      </View>
    </View>
  );
}

function ThirdScreen({ navigation }) {
  return (
    <View style={styles.homeContainer}>
      <View style={styles.topBar}>
        <TouchableOpacity 
          onPress={() => navigation.openDrawer()} 
          style={styles.menuButton}
        >
          <Ionicons name="menu" size={28} color="#fff" />
        </TouchableOpacity>
        <Text style={styles.topBarTitle}>Mensagens</Text>
      </View>
      <View style={styles.content}>
        <Text style={styles.contentText}> Em breve </Text>
      </View>
    </View>
  );
}

// drawer das telas
function AppDrawer() {
  return (
    <Drawer.Navigator
      screenOptions={{ headerShown: false }}
      drawerContent={(props) => <CustomDrawerContent {...props} />}
    >
      <Drawer.Screen name="Home" component={HomeScreen} />
      <Drawer.Screen name="SecondScreen" component={SecondScreen} />
      <Drawer.Screen name="ThirdScreen" component={ThirdScreen} />
    </Drawer.Navigator>
  );
}

// tela inicial
function SplashScreen({ navigation }) {
  useEffect(() => {
    const checkLogin = async () => {
      const logado = await AsyncStorage.getItem('logado');
      setTimeout(() => {
        if (logado === 'true') {
          navigation.replace('AppDrawer');
        } else {
          navigation.replace('Login');
        }
      }, 2000);
    };
    checkLogin();
  }, []);

  return (
    <View style={styles.splashContainer}>
      <Image 
        source={{ uri: 'https://raw.githubusercontent.com/CauBG/APP-mobile/refs/heads/main/logo.png' }}
        style={styles.logo} 
      />
      <Text style={styles.nomeApp}></Text>
    </View>
  );
}

// tela de login
function LoginScreen({ navigation }) {
  const [usuario, setUsuario] = useState('');
  const [senha, setSenha] = useState('');
  const [mostrarSenha, setMostrarSenha] = useState(false);

  const fazerLogin = async () => {
    const contasSalvas = await AsyncStorage.getItem('contas');
    const contas = contasSalvas ? JSON.parse(contasSalvas) : [];

    const usuarioValido = contas.find(
      (conta) => conta.usuario === usuario && conta.senha === senha
    );

    if (usuarioValido) {
      await AsyncStorage.setItem('logado', 'true');
      await AsyncStorage.setItem('usuario', usuario);
      await AsyncStorage.setItem('senha', senha);
      navigation.replace('AppDrawer');
    } else {
      alert('Usuário ou senha inválidos');
    }
  };

  const podeEntrar = usuario.trim() !== '' && senha.trim() !== '';

  return (
    <View style={styles.mainContainer}>
      <Image
        source={{ uri: 'https://raw.githubusercontent.com/CauBG/APP-mobile/refs/heads/main/logo.png' }}
        style={styles.logo1}
      />

      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          placeholder="Usuário"
          value={usuario}
          onChangeText={setUsuario}
        />
      </View>

      <View style={styles.inputContainer}>
        <View style={styles.senhaContainer}>
          <TextInput
            style={styles.inputSenha}
            placeholder="Senha"
            value={senha}
            onChangeText={setSenha}
            secureTextEntry={!mostrarSenha}
          />
          <TouchableOpacity onPress={() => setMostrarSenha(!mostrarSenha)}>
            <Ionicons
              name={mostrarSenha ? "eye-off" : "eye"}
              size={24}
              color="#999"
            />
          </TouchableOpacity>
        </View>
      </View>

      <TouchableOpacity
        style={[styles.button,, { opacity: podeEntrar ? 1 : 0.5 }]}
        onPress={fazerLogin}
        disabled={!podeEntrar}
      >
        <Text style={styles.buttonText}>Entrar</Text>
      </TouchableOpacity>

      <TouchableOpacity onPress={() => navigation.navigate('Register')}>
        <Text style={styles.registerText}>Criar conta</Text>
      </TouchableOpacity>
    </View>
  );
}

// Tela de Registro
function RegisterScreen({ navigation }) {
  const [usuario, setUsuario] = useState('');
  const [email, setEmail] = useState('');
  const [senha, setSenha] = useState('');
  const [mostrarSenha, setMostrarSenha] = useState(false);

  const validarEmail = (email) => {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
  };

  const registrar = async () => {
    if (!validarEmail(email)) {
      alert('Por favor, insira um email válido!');
      return;
    }

    const contasSalvas = await AsyncStorage.getItem('contas');
    const contas = contasSalvas ? JSON.parse(contasSalvas) : [];

    const jaExiste = contas.find((conta) => conta.usuario === usuario);
    if (jaExiste) {
      alert('Usuário já existe!');
      return;
    }

    const novaConta = { usuario, email, senha };
    contas.push(novaConta);

    await AsyncStorage.setItem('contas', JSON.stringify(contas));
    alert('Conta criada com sucesso!');
    navigation.goBack();
  };

  const podeRegistrar = usuario.trim() !== '' && validarEmail(email) && senha.trim() !== '';

  return (
    <View style={styles.mainContainer}>
      <Text style={styles.loginTitle}>Criar Conta</Text>

      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          placeholder="Usuário"
          value={usuario}
          onChangeText={setUsuario}
        />
      </View>

      <View style={styles.inputContainer}>
        <TextInput
          style={styles.input}
          placeholder="Email"
          value={email}
          onChangeText={setEmail}
          keyboardType="email-address"
          autoCapitalize="none"
        />
      </View>

      <View style={styles.inputContainer}>
        <View style={styles.senhaContainer}>
          <TextInput
            style={styles.inputSenha}
            placeholder="Senha"
            value={senha}
            onChangeText={setSenha}
            secureTextEntry={!mostrarSenha}
          />
          <TouchableOpacity onPress={() => setMostrarSenha(!mostrarSenha)}>
            <Ionicons
              name={mostrarSenha ? "eye-off" : "eye"}
              size={24}
              color="#999"
            />
          </TouchableOpacity>
        </View>
      </View>

      <TouchableOpacity
        style={[styles.button, { opacity: podeRegistrar ? 1 : 0.5 }]}
        onPress={registrar}
        disabled={!podeRegistrar}
      >
        <Text style={styles.buttonText}>Registrar</Text>
      </TouchableOpacity>

      <TouchableOpacity onPress={() => navigation.navigate('Login')}>
        <Text style={[styles.registerText, { marginTop: 10 }]}>
          Ja tem conta? Login
        </Text>
      </TouchableOpacity>
    </View>
  );
}

// app
export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{ headerShown: false }}>
        <Stack.Screen name="Splash" component={SplashScreen} />
        <Stack.Screen name="Login" component={LoginScreen} />
        <Stack.Screen name="Register" component={RegisterScreen} />
        <Stack.Screen name="AppDrawer" component={AppDrawer} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

//estilos
const styles = StyleSheet.create({
  splashContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#3c3c3c' },
  logo: { width:150, height:150, marginBottom:20 },
  nomeApp: { fontSize:28, color:'#fff', fontWeight:'bold' },

  mainContainer: { flex:1, justifyContent:'center', alignItems:'center', backgroundColor:'#3c3c3c', padding:20 },
  logo1:{ width:150, height:150, marginBottom:85 },


  loginTitle: {
    fontSize:32,
    marginBottom:40,
    fontWeight:'bold',
    color:'#fff'
  },

  inputContainer: {
    width:'100%',
    marginBottom:20,
    shadowColor:'#000',
    shadowOffset:{ width:0, height:2 },
    shadowOpacity:0.25,
    shadowRadius:3.84,
    elevation:5,
    borderRadius:10,
    backgroundColor:'#fff'
  },

  input: {
    width:'100%',
    height:50,
    paddingHorizontal:15,
    borderRadius:10,
    fontSize:16
  },

  senhaContainer: {
    flexDirection:'row',
    alignItems:'center',
    paddingHorizontal:15,
    height:50,
    borderRadius:10,
  },

  inputSenha: {
    flex:1,
    fontSize:16
  },

  button: {
    width:'100%',
    height:50,
    backgroundColor:'#8c8c8c',
    borderRadius:10,
    justifyContent:'center',
    alignItems:'center',
    shadowColor:'#000',
    shadowOffset:{ width:0, height:3 },
    shadowOpacity:0.27,
    shadowRadius:4.65,
    elevation:6,
    marginTop:10
  },

  buttonText: {
    color:'#fff',
    fontSize:18,
    fontWeight:'bold'
  },

  registerText: {
    marginTop:15,
    color:'#fff',
    fontSize:16,
    fontWeight:'bold'
  },

  homeContainer: { flex:1, backgroundColor:'#EDEDED' },

  topBar: {
  flexDirection: 'row',
  alignItems: 'center',
  justifyContent: 'space-between', // 👈 adiciona isso
  backgroundColor: '#333',
  paddingHorizontal: 15,
  paddingVertical: 10,
},

  menuButton: {
    marginRight: 10
  },

  topBarTitle: {
    color:'#fff',
    fontSize:20,
    fontWeight:'bold'
  },

  drawerTopBar: {
    height: 60,
    backgroundColor: '#333',
    justifyContent: 'center',
    paddingLeft: 15,
    marginBottom: 10
  },

  drawerTopBarText: {
    color: '#fff',
    fontSize: 20,
    fontWeight: 'bold'
  },

  content: { 
    flex:1, 
    padding:20, 
    justifyContent:'center', 
    alignItems:'center' 
  },

  contentText: {
    color:'#333',
    fontSize:16,
    textAlign:'center',
  },
  avatarButton: {
  marginLeft: 'auto',
  borderRadius: 50,
  overflow: 'hidden',
},

avatarImage: {
  width: 38,
  height: 38,
  borderRadius: 19,
},
profileSection: {
  paddingHorizontal: 20,
  marginBottom: 10,
},

profileRow: {
  flexDirection: 'row',
  alignItems: 'center',
  gap: 10,
},

drawerAvatar: {
  width: 60,
  height: 60,
  borderRadius: 30,
},

drawerUserName: {
  fontSize: 18,
  color: '#333',
  fontWeight: 'bold',
},

});
